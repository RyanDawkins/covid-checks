{"version":3,"sources":["calculator/corona-check.js","calculator/IncomeForm.js","disclaimer/Disclaimer.js","App.js","serviceWorker.js","index.js"],"names":["SINGLE","baseAmount","maxIncomeForFullPayout","minIncomeForPayout","minimumPayout","MARRIED","CoronaCheck","income","isMarried","this","_income","_isMarried","maritalValues","_getMaritalValues","getIncome","payout","_getDeductionOffset","Math","round","IncomeForm","props","check","state","undefined","calculatePayout","handleMaritalStatusChange","bind","handleIncomeChange","event","changeIncome","target","value","setState","changeMaritalStatus","className","htmlFor","id","type","onChange","placeholder","checked","React","Component","Disclaimer","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","rel","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fff6ba76.chunk.js","sourcesContent":["const SINGLE = {\n    baseAmount: 1200,\n    maxIncomeForFullPayout: 75000,\n    minIncomeForPayout: 2500,\n    minimumPayout: 600\n}\n\nconst MARRIED = {\n    baseAmount: 2400,\n    maxIncomeForFullPayout: 150000,\n    minIncomeForPayout: 2500,\n    minimumPayout: 1200\n}\n\nconst DEDUCTION_PER_INCREMENT = 5\nconst INCREMENT = 100\n\nexport default class CoronaCheck {\n\n    /**\n     * @param {number} income \n     * @param {boolean} isMarried \n     */\n    constructor(income, isMarried) {\n        this._income = income\n        this._isMarried = isMarried\n    }\n\n    /**\n     * @returns {number} payout based on income and marital status\n     */\n    calculatePayout() {\n        const maritalValues = this._getMaritalValues()\n        if (this.getIncome() <= maritalValues.minIncomeForPayout) {\n            return maritalValues.minimumPayout\n        }\n\n        const payout = maritalValues.baseAmount - this._getDeductionOffset(maritalValues.maxIncomeForFullPayout)\n        return payout < 0 ? 0 : payout\n    }\n\n    _getMaritalValues() {\n        return this.isMarried() ? MARRIED : SINGLE\n    }\n\n    _getDeductionOffset(maxIncomeForFullPayout) {\n        if (this.getIncome() <= maxIncomeForFullPayout) return 0\n        return Math.round(((this.getIncome() - maxIncomeForFullPayout) / INCREMENT) * DEDUCTION_PER_INCREMENT)\n    }\n\n    /**\n     * @param {number} income\n     * @returns {CoronaCheck} new instance with a different income\n     */\n    changeIncome(income) {\n        return new CoronaCheck(income, this.isMarried())\n    }\n\n    /**\n     * @param {boolean} isMarried true if married, false if single\n     * @returns {CoronaCheck} new instance with a different marital status\n     */\n    changeMaritalStatus(isMarried) {\n        return new CoronaCheck(this.getIncome(), isMarried)\n    }\n\n    /**\n     * @returns {boolean} true if married, false if single\n     */\n    isMarried() {\n        return this._isMarried\n    }\n\n    /**\n     * @returns {number} income in USD\n     */\n    getIncome() {\n        return this._income\n    }\n\n}","import React from 'react';\n\nimport './IncomeForm.css';\nimport CoronaCheck from './corona-check';\n\nclass IncomeForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.check = new CoronaCheck(0, false)\n        this.state = { income: undefined, isMarried: this.check.isMarried(), payout: this.check.calculatePayout() }\n\n        this.handleMaritalStatusChange = this.handleMaritalStatusChange.bind(this)\n        this.handleIncomeChange = this.handleIncomeChange.bind(this)\n    }\n\n    handleIncomeChange(event) {\n        this.check = this.check.changeIncome(event.target.value)\n        this.setState({\n            ...this.state,\n            income:event.target.value,\n            payout: this.check.calculatePayout()\n        })\n    }\n\n    handleMaritalStatusChange(event) {\n        const isMarried = event.target.value === 'true'\n        this.check = this.check.changeMaritalStatus(isMarried)\n        this.setState({\n            ...this.state,\n            isMarried: isMarried,\n            payout: this.check.calculatePayout()\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"IncomeForm\">\n                <form>\n                    <fieldset>\n                        <label htmlFor=\"income\">Income</label><br />\n                        <input id=\"income\" type=\"number\" value={this.state.income} onChange={this.handleIncomeChange} placeholder=\"Income\"/>\n                    </fieldset>\n                    <fieldset>\n                        <label htmlFor=\"maritalStatus\">Married?</label><br />\n                        <input id=\"maritalStatus\" type=\"radio\" \n                            value={true}\n                            checked={this.state.isMarried}\n                            onChange={this.handleMaritalStatusChange} />\n                        Yes\n                        <input id=\"maritalStatus\" type=\"radio\" \n                            value={false}\n                            checked={!this.state.isMarried}\n                            onChange={this.handleMaritalStatusChange} />\n                        No\n                    </fieldset>\n                </form>\n                <p>Projected payout: ${this.state.payout}</p>\n            </div>\n          );\n    }\n}\n\nexport default IncomeForm;\n","import React from 'react'\nimport './Disclaimer.css'\n\nexport default class Disclaimer extends React.Component {\n    render() {\n        return (\n            <div className=\"alert alert-warning\">\n                <p>\n                    <svg className=\"bi bi-exclamation-circle\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 108 1a7 7 0 000 14zm0 1A8 8 0 108 0a8 8 0 000 16z\" clipRule=\"evenodd\"/>\n                        <path d=\"M7.002 11a1 1 0 112 0 1 1 0 01-2 0zM7.1 4.995a.905.905 0 111.8 0l-.35 3.507a.552.552 0 01-1.1 0L7.1 4.995z\"/>\n                    </svg>\n\n                    This calculation does no guarantee a payout. This is exclusively a projection based on the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.npr.org/2020/03/19/818253789/congress-awaits-gop-relief-plan-as-first-lawmakers-test-positive-for-coronavirus\">NPR article of the bill propsed on 3/19/2020.</a>\n                </p>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport IncomeForm from './calculator/IncomeForm'\nimport Disclaimer from './disclaimer/Disclaimer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Disclaimer />\n      <header className=\"App-header\">\n        <IncomeForm />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}